name: Deploy FastAPI ECS Service

on:
  push:
    branches:
      - main
    paths:
      - 'api/**'

permissions:
  id-token: write
  contents: read

jobs:
  build-and-push:
    uses: ./.github/workflows/build_and_push_to_ecr.yaml
    with:
      image_name: fastapi
      image_path: api

  deploy-fastapi-service:
    runs-on: ubuntu-latest

    env:
      AWS_ACCOUNT_ID: 938674861148
      AWS_REGION: us-east-1

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/gha-ecs-lambda-iam-role
        aws-region: ${{ env.AWS_REGION }}

    - name: Re-Deploy ECS service
      run: |
        aws ecs update-service \
          --cluster fastapi-cluster \
          --service fastapi \
          --force-new-deployment

    - name: Wait for ECS deployment to complete
      run: |
        timeout=600
        interval=10
        elapsed=0
        while [ $elapsed -lt $timeout ]; do
          STATUS=$(aws ecs describe-services --cluster fastapi-cluster --services fastapi --query 'services[0].deployments[0].rolloutState' --output text)
          if [ "$STATUS" == "COMPLETED" ]; then
            echo "ECS deployment completed successfully."
            break
          elif [ "$STATUS" == "FAILED" ]; then
            echo "ECS deployment failed."
            exit 1
          else
            echo "Waiting for ECS deployment to complete..."
            sleep $interval
            elapsed=$((elapsed + interval))
          fi
        done
        if [ $elapsed -ge $timeout ]; then
          echo "ECS deployment timed out."
          exit 1
        fi